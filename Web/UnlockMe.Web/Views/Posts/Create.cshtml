@model UnlockMe.Web.ViewModels.Post.CreatePostInputModel
@{
    this.ViewData["Title"] = "Create new post";
}
<h1>@this.ViewData["Title"]</h1>
<form method="post" class="card col-md-8 offset-2 bg-light" enctype="multipart/form-data" id="createPost">
    <label for="exampleDataList" class="d-inline p-3 ">Create your Post!</label>
    <div asp-validation-summary="All"></div>
    <div class="form-group">
        <label asp-for="Title"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="file-p">
        <label asp-for="Picture"></label>
        <input type="file" accept="image/*" onchange="loadFile(event)" asp-for="Picture" class="form-control" />
        <span asp-validation-for="Picture" class="text-danger"></span>
    </div>
    <hr>
    <img id="output" class="col-md-6 offset-3" />
    <hr>
    <!-- <img style="filter:blur(5px)" id="output2" class="col-md-8 offset-2" />  -->
    @*Eventualy, user must add tag for every post.. maybe add Enum of Categories.. TODO
            <div class="form-group">
            <label asp-for="TagId"></label>
            <select asp-for="TagId" class="form-control"></select>>
            <span asp-validation-for="TagId" class="text-danger"></span>
        </div>*@
</form>
<hr>
<button type="submit" class="btn btn-primary col-md-2 offset-5" data-toggle="modal" data-target="#modalCreate">Create Post &#128151</button>

<!-- Modal CreatePost for confirmation window -->
<div class="modal fade" id="modalCreate" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Create Post</h5>
                <hr>
            </div>
            <div class="modal-body">
                The pictures cannot be edited later, do you want to go back and check it again?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Go Back</button>
                <button type="button" class="btn btn-primary" onclick="createPost.submit()">Create Post &#128151</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var loadFile = function (event) {
            var reader = new FileReader();
            reader.onload = function () {
                var output = document.getElementById('output');
                output.src = reader.result;
            };
            reader.readAsDataURL(event.target.files[0]);
        };

        var loadFile2 = function (event) {
            var reader = new FileReader();
            reader.onload = function () {
                var output = document.getElementById('output2');
                output.src = reader.result;
            };
            reader.readAsDataURL(event.target.files[0]);
        };

        let canvas = document.getElementById("canvas");
        canvas.width = window.innerWidth - 60;
        canvas.height = window.innerHeight * 0.6;
        let context = canvas.getContext("2d");
        context.fillStyle = "white";
        context.fillRect(0, 0, canvas.width, canvas.height);
        let restore_array = [];
        let start_index = -1;
        let stroke_color = 'black';
        let stroke_width = "2";
        let is_drawing = false;

        function change_color(element) {
            stroke_color = element.style.background;
        }

        function change_width(element) {
            stroke_width = element.innerHTML
        }

        function start(event) {
            is_drawing = true;
            context.beginPath();
            context.moveTo(getX(event), getY(event));
            event.preventDefault();
        }

        function draw(event) {
            if (is_drawing) {
                context.lineTo(getX(event), getY(event));
                context.strokeStyle = stroke_color;
                context.lineWidth = stroke_width;
                context.lineCap = "round";
                context.lineJoin = "round";
                context.stroke();
            }
            event.preventDefault();
        }

        function stop(event) {
            if (is_drawing) {
                context.stroke();
                context.closePath();
                is_drawing = false;
            }
            event.preventDefault();
            restore_array.push(context.getImageData(0, 0, canvas.width, canvas.height));
            start_index += 1;
        }

        function getX(event) {
            if (event.pageX == undefined) { return event.targetTouches[0].pageX - canvas.offsetLeft }
            else { return event.pageX - canvas.offsetLeft }
        }


        function getY(event) {
            if (event.pageY == undefined) { return event.targetTouches[0].pageY - canvas.offsetTop }
            else { return event.pageY - canvas.offsetTop }
        }

        canvas.addEventListener("touchstart", start, false);
        canvas.addEventListener("touchmove", draw, false);
        canvas.addEventListener("touchend", stop, false);
        canvas.addEventListener("mousedown", start, false);
        canvas.addEventListener("mousemove", draw, false);
        canvas.addEventListener("mouseup", stop, false);
        canvas.addEventListener("mouseout", stop, false);

        function Restore() {
            if (start_index <= 0) {
                Clear()
            } else {
                start_index += -1;
                restore_array.pop();
                if (event.type != 'mouseout') {
                    context.putImageData(restore_array[start_index], 0, 0);
                }
            }
        }

        function Clear() {
            context.fillStyle = "white";
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.fillRect(0, 0, canvas.width, canvas.height);
            restore_array = [];
            start_index = -1;
        }
    </script>
}